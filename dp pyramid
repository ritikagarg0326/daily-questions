class Solution:
    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        dp=[[0]*i for i in range(1,102)]
        dp[0][0]=poured
        for i in range(query_row+1):
            for j in range(i+1):
                up=(dp[i][j]-1.0)/2.0
                if up>0:
                    dp[i+1][j]=dp[i+1][j]+up
                    dp[i+1][j+1]=dp[i+1][j+1]+up
                
        res=min(1,dp[query_row][query_glass])
        return res
    
#     dp = [[0]*x for x in range(1,102)]

# 		dp[0][0] = poured

# 		for row in range(query_row + 1):

# 			for col in range(row + 1):

# 				mid_pour = (dp[row][col] - 1.0) / 2.0

# 				if mid_pour > 0:

# 					dp[row+1][col] = dp[row+1][col] + mid_pour

# 					dp[row+1][col+1] = dp[row+1][col+1] + mid_pour

# 		result = min(1, dp[query_row][query_glass])

		# return result
